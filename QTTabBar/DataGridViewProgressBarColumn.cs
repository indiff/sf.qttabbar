// Generated by Reflector from c:\program files\qttabbar\QTTabBar.dll
namespace QTTabBarLib
{
  using System;
  using System.Collections.Generic;
  using System.Drawing;
  using System.Windows.Forms;
  
  internal sealed class DataGridViewProgressBarColumn : DataGridViewColumn
  {
    private List<DataGridViewProgressBarCell> lstCells;
    private static string VALUE_WAITING = "           Waiting...           ";
    
    public DataGridViewProgressBarColumn() : base(new DataGridViewProgressBarCell())
    {
      this.lstCells = new List<DataGridViewProgressBarCell>();
      base.SortMode = DataGridViewColumnSortMode.Automatic;
    }
    
    public void FinishProgress(DataGridViewProgressBarCell cell)
    {
      if (cell.CalculatingStatus == HashCalcStatus.Calculating)
      {
        cell.CalculatingStatus = HashCalcStatus.Finished;
      }
      cell.EndProgress();
      this.lstCells.Remove(cell);
    }
    
    public void InitializeProgress(DataGridViewProgressBarCell cell)
    {
      if (cell.ColumnIndex != base.Index)
      {
        throw new ArgumentException("cell is not contained in this column.");
      }
      if (!this.lstCells.Contains(cell))
      {
        cell.OldStyle = cell.Style.Clone();
        cell.Value = VALUE_WAITING;
        cell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
        cell.Style.ForeColor = cell.Style.SelectionForeColor = SystemColors.GrayText;
        cell.CalculatingStatus = HashCalcStatus.Calculating;
        this.lstCells.Add(cell);
      }
    }
    
    public void StopAll()
    {
      foreach (DataGridViewProgressBarCell cell in this.lstCells)
      {
        if (cell.CalculatingStatus != HashCalcStatus.Finished)
        {
          cell.CalculatingStatus = HashCalcStatus.Aborted;
        }
        cell.EndProgress();
      }
      this.lstCells.Clear();
    }
  }
}

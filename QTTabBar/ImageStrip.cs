// Generated by Reflector from c:\program files\qttabbar\QTTabBar.dll
namespace QTTabBarLib
{
  using System;
  using System.Collections.Generic;
  using System.Drawing;
  using System.Drawing.Imaging;
  using System.Reflection;
  
  internal sealed class ImageStrip : IDisposable
  {
    private List<Bitmap> lstImages = new List<Bitmap>();
    private Size size;
    private Color transparentColor;
    
    public ImageStrip(Size size)
    {
      this.size = size;
    }
    
    public void AddStrip(Bitmap bmp)
    {
      int width = bmp.Width;
      int num2 = 0;
      bool flag = this.transparentColor != Color.Empty;
      if (((width % this.size.Width) != 0) || (bmp.Height != this.size.Height))
      {
        throw new ArgumentException("size invalid.");
      }
      Rectangle rect = new Rectangle(Point.Empty, this.size);
      while ((width - this.size.Width) > -1)
      {
        Bitmap image = bmp.Clone(rect, PixelFormat.Format32bppArgb);
        if (flag)
        {
          image.MakeTransparent(this.transparentColor);
        }
        if ((this.lstImages.Count > num2) && (this.lstImages[num2] != null))
        {
          using (Graphics graphics = Graphics.FromImage(this.lstImages[num2]))
          {
            graphics.Clear(Color.Transparent);
            graphics.DrawImage(image, 0, 0);
            image.Dispose();
            goto Label_00E4;
          }
        }
        this.lstImages.Add(image);
      Label_00E4:
        num2++;
        width -= this.size.Width;
        rect.X += this.size.Width;
      }
    }
    
    public void Dispose()
    {
      foreach (Bitmap bitmap in this.lstImages)
      {
        if (bitmap != null)
        {
          bitmap.Dispose();
        }
      }
      this.lstImages.Clear();
    }
    
    public Bitmap this[int index]
    {
      get
      {
        return this.lstImages[index];
      }
    }
    
    public Color TransparentColor
    {
      set
      {
        this.transparentColor = value;
      }
    }
  }
}
